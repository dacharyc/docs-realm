.. _ios-separated-example-define-a-realm-object-schema:

========================================
Define a Realm Object Schema - Swift SDK
========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Code Examples
-------------

.. _ios-separated-example-define-a-new-object-type:

Define a New Object Type
~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can define a Realm object by deriving from the
      :swift-sdk:`Object <Extensions/Object.html>` or
      :swift-sdk:`EmbeddedObject <Extensions/EmbeddedObject.html>`
      class. The name of the class becomes the table name in the realm,
      and properties of the class persist in the database. This makes it
      as easy to work with persisted objects as it is to work with
      regular Swift objects.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.define-a-model.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can define a Realm object by deriving from the
      :objc-sdk:`RLMObject <Classes/RLMObject.html>` or
      :objc-sdk:`RLMEmbeddedObject
      <Classes/RLMEmbeddedObject.html>` class. The name of the
      class becomes the table name in the realm, and properties of the
      class persist in the database. This makes it as easy to work with
      persisted objects as it is to work with regular Objective-C
      objects.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.define-a-model.m
         :language: objectivec

.. note::

   Class names are limited to a maximum of 57 UTF-8 characters.

Related Reading
```````````````

- :ref:`ios-separated-example-explain-define-a-new-object-type`

.. _ios-separated-example-declare-a-property:

Declare Properties
~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: Swift
      :tabid: swift

      When declaring non-generic properties, use the ``@Persisted`` annotation. 
      The ``@Persisted`` attribute turns Realm model properties into accessors 
      for the underlying database data.

   .. tab:: Objective C
      :tabid: objective-c

      Declare properties on your object type as you would on a normal
      Objective-C interface.
      
      In order to use your interface in a Realm array, pass your
      interface name to the ``RLM_ARRAY_TYPE()`` macro. You can put this
      at the bottom of your interface's header file. The
      ``RLM_ARRAY_TYPE()`` macro creates a protocol that allows you to
      tag :objc-sdk:`RLMArray <Classes/RLMArray.html>` with your type:

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.array-declaration.m
         :language: objectivec
   
   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      When declaring non-generic properties, use the ``@objc dynamic
      var`` annotation. The ``@objc dynamic var`` attribute turns Realm
      model properties into accessors for the underlying database data.
      If the class is declared as ``@objcMembers`` (Swift 4 or later),
      you can declare properties as ``dynamic var`` without ``@objc``.

      To declare properties of generic types ``LinkingObjects``,
      ``List``, and ``RealmProperty``, use ``let``. Generic properties
      cannot be represented in the Objective‑C runtime, which
      {+client-database+} uses for dynamic dispatch of dynamic
      properties.

.. note::

   Property names are limited to a maximum of 63 UTF-8 characters.

Related Reading
```````````````

- :ref:`ios-separated-example-explain-declare-a-property`

.. _ios-separated-example-specify-an-optional-required-property:

Specify an Optional/Required Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: Swift
      :tabid: swift

      You can declare properties as optional or required (non-optional) using 
      standard Swift syntax.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.optional-required-properties.swift
         :language: swift

   .. tab:: Objective C
      :tabid: objective-c

      To declare a given property as required, implement the
      :objc-sdk:`requiredProperties
      <Classes/RLMObject.html#/c:objc(cs)RLMObject(cm)requiredProperties>`
      method and return an array of required property names.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.optional-required-properties.m
         :language: objectivec
   
   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      .. versionchanged:: 10.8.0
         ``RealmProperty`` replaces ``RealmOptional``

      You can declare ``String``, ``Date``, ``Data``, and
      :swift-sdk:`ObjectId <Classes/ObjectId.html>` properties as
      optional or required (non-optional) using standard Swift syntax.
      Declare optional numeric types using the :swift-sdk:`RealmProperty
      <Classes/RealmProperty.html>` 
      type.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.optional-required-properties-objc-dynamic.swift
         :language: swift

      RealmProperty supports ``Int``, ``Float``, ``Double``, ``Bool``,
      and all of the sized versions of ``Int`` (``Int8``, ``Int16``,
      ``Int32``, ``Int64``).

.. _ios-separated-example-specify-a-primary-key:

Specify a Primary Key
~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: Swift
      :tabid: swift

      Declare the property with :swift-sdk:`primaryKey: true
      <Structs/Persisted.html#/s:10RealmSwift9PersistedVA2A11_PrimaryKey01_A5ValueRpzrlE07primaryE0ACyxGSb_tcfc>`
      on the ``@Persisted`` notation to set the model's primary key.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.specify-a-primary-key.swift
         :language: swift

   .. tab:: Objective C
      :tabid: objective-c

      Override :objc-sdk:`+[RLMObject primaryKey]
      <Classes/RLMObject.html#/c:objc(cs)RLMObject(cm)primaryKey>` to
      set the model's primary key.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.specify-a-primary-key.m
         :language: objectivec

   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      Override `Object.primaryKey()
      <https://www.mongodb.com/docs/realm-sdks/swift/10.9.0/Extensions/Object.html#/c:@CM@RealmSwift@@objc(cs)RealmSwiftObject(cm)primaryKey>`_
      to set the model's primary key.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.specify-a-primary-key-objc-dynamic.swift
         :language: swift

Related Reading
```````````````

- :ref:`ios-separated-example-explain-specify-a-primary-key`

.. _ios-separated-example-index-a-property:

Index a Property
~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: Swift
      :tabid: swift

      To index a property, declare the property with 
      :swift-sdk:`indexed:true
      <Extensions/Object.html#/c:@CM@RealmSwift@@objc(cs)RealmSwiftObject(cm)indexedProperties>`
      on the ``@Persisted`` notation.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.index-a-property.swift
         :language: swift

   .. tab:: Objective C
      :tabid: objective-c

      To index a property, override :objc-sdk:`+[RLMObject
      indexedProperties]
      <Classes/RLMObject.html#/c:objc(cs)RLMObject(cm)indexedProperties>`
      and return a list of indexed property names.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.index-a-property.m
         :language: objectivec

   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      To index a property, override
      `Object.indexedProperties()
      <https://www.mongodb.com/docs/realm-sdks/swift/10.9.0/Extensions/Object.html#/c:@CM@RealmSwift@@objc(cs)RealmSwiftObject(cm)indexedProperties>`_
      and return a list of indexed property names.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.index-a-property-objc-dynamic.swift
         :language: swift

Related Reading
```````````````

- :ref:`ios-separated-example-explain-index-a-property`

.. _ios-separated-example-ignore-a-property:

Ignore a Property
~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: Swift
      :tabid: swift

      .. deprecated:: 10.10.0 
         ``ignoredProperties()``

      If you don't want to save a field in your model to its realm,
      leave the ``@Persisted`` notation off the property attribute.

      Additionally, if you mix ``@Persisted`` and ``@objc dynamic`` 
      property declarations within a class, the ``@objc dynamic`` 
      properties will be ignored.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.ignore-a-property.swift
         :language: swift

   .. tab:: Objective C
      :tabid: objective-c

      If you don't want to save a field in your model to its realm,
      override :objc-sdk:`+[RLMObject ignoredProperties]
      <Classes/RLMObject.html#/c:objc(cs)RLMObject(cm)ignoredProperties>`
      and return a list of ignored property names.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.ignore-a-property.m
         :language: objectivec

   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      If you don't want to save a field in your model to its realm,
      override `Object.ignoredProperties()
      <https://www.mongodb.com/docs/realm-sdks/swift/10.9.0/Extensions/Object.html#/c:@CM@RealmSwift@@objc(cs)RealmSwiftObject(cm)ignoredProperties>`_
      and return a list of ignored property names.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.ignore-a-property-objc-dynamic.swift
         :language: swift

Related Reading
```````````````

- :ref:`ios-separated-example-explain-ignore-a-property`

.. _ios-separated-example-realm-enum:

Declare Enum Properties
~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: Swift
      :tabid: swift

      .. versionchanged:: 10.10.0 
         {+service-short+} supports enums of any RawType. Protocol is now 
         ``PersistableEnum`` rather than ``RealmEnum``.

      You can use enums with ``@Persisted`` by marking it as complying with the
      :swift-sdk:`PersistableEnum <Protocols.html#/s:10RealmSwift15PersistableEnumP>` 
      protocol. {+service-short+} supports enums of any RawType.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.realm-object-enum.swift
         :language: swift

   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      {+service-short+} supports only ``Int``-backed ``@objc`` enums.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.realm-object-enum-objc-dynamic.swift
         :language: swift

      .. seealso::

         `RealmEnum <https://www.mongodb.com/docs/realm-sdks/swift/10.9.0/Protocols.html#/s:10RealmSwift0A4EnumP>`_

.. _ios-separated-example-define-a-to-one-relationship-property:

Define a To-One Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/Relationships.codeblock.to-one-relationship.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/Relationships.codeblock.to-one-relationship.m
         :language: objectivec

Related Reading
```````````````

- :ref:`ios-separated-example-explain-define-a-to-one-relationship-property`

.. _ios-separated-example-define-a-to-many-relationship-property:

Define a To-Many Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      Use :swift-sdk:`List <Classes/List.html>` tagged with your target
      type to define your to-many relationship property.

      .. literalinclude:: /examples/generated/code/start/Relationships.codeblock.to-many-relationship.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      Use :objc-sdk:`RLMArray <Classes/RLMArray.html>` tagged with your
      target type to define your to-many relationship property.

      .. tip::

         Remember to use the ``RLM_ARRAY_TYPE()`` macro with your type
         to :ref:`declare the RLMArray protocol for your type
         <ios-declare-a-property>`.

      .. literalinclude:: /examples/generated/code/start/Relationships.codeblock.to-many-relationship.m
         :language: objectivec

Related Reading
```````````````

- :ref:`ios-separated-example-explain-define-a-to-many-relationship-property`

.. _ios-separated-example-define-an-inverse-relationship-property:

Define an Inverse Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: Swift
      :tabid: swift

      To define an inverse relationship, use :swift-sdk:`LinkingObjects
      <Structs/LinkingObjects.html>` in your object model. The
      ``LinkingObjects`` definition specifies the object type and
      property name of the relationship that it inverts.

      .. literalinclude:: /examples/generated/code/start/Relationships.codeblock.inverse-relationship.swift
         :language: swift

   .. tab:: Objective C
      :tabid: objective-c

      To define an inverse relationship, use
      :objc-sdk:`RLMLinkingObjects
      <Classes.html#/c:objc(cs)RLMLinkingObjects>` in your object model.
      Override :objc-sdk:`+[RLMObject linkingObjectProperties]
      <Classes/RLMObject.html#/c:objc(cs)RLMObject(cm)linkingObjectsProperties>`
      method in your class to specify the object type and property name
      of the relationship that it inverts.

      .. literalinclude:: /examples/generated/code/start/Relationships.codeblock.inverse-relationship.m
         :language: objectivec

   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      To define an inverse relationship, use `LinkingObjects
      <https://www.mongodb.com/docs/realm-sdks/swift/10.9.0/Structs/LinkingObjects.html>`_ 
      in your object model. The ``LinkingObjects`` definition specifies 
      the object type and property name of the relationship that it inverts.

      .. literalinclude:: /examples/generated/code/start/Relationships.codeblock.inverse-relationship-objc-dynamic.swift
         :language: swift

Related Reading
```````````````

- :ref:`ios-separated-example-explain-define-an-inverse-relationship-property`

.. _ios-separated-example-define-an-embedded-object-property:

Define an Embedded Object Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can define an embedded object by deriving from the
      :swift-sdk:`EmbeddedObject <Extensions/EmbeddedObject.html>`
      class. You can use your embedded object in another model as you
      would any other type.

      .. literalinclude:: /examples/generated/code/start/EmbeddedObjects.codeblock.models.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can define an embedded object by deriving from the
      :objc-sdk:`RLMEmbeddedObject
      <Classes/RLMEmbeddedObject.html>` class. You can use your
      embedded object in another model as you would any other type.

      .. literalinclude:: /examples/generated/code/start/EmbeddedObjects.codeblock.models.m
         :language: objectivec

Related Reading
```````````````

- :ref:`ios-separated-example-explain-define-an-embedded-object-property`

Explainers
----------

.. _ios-separated-example-explain-define-a-new-object-type:

Explain: Define a New Object Type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

{+client-database+} applications model data as objects composed of
field-value pairs that each contain one or more supported data types. 
Realm objects behave like regular Swift or Objective-C objects, but they also
include additional features like real-time updating data views and reactive 
change event handlers.

Objects of the same class share an object schema that defines the fields
and relationships of those objects. Every {+realm+} has a schema that
consists of one or more object schemas describing the different forms of
object that can be stored in that {+realm+}.

Related Reading
```````````````

- :ref:`Supported Data Types <ios-supported-property-types>`
- Glossary: :term:`Realm objects <Realm object>`
- :ref:`Live Objects <ios-live-object>`
- :ref:`React to Changes <ios-react-to-changes>`

.. _ios-separated-example-explain-declare-a-property:

Explain: Declare Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you declare the property attributes of a class, you can specify whether
or not those properties should be managed by the {+realm+}. Managed properties 
are stored or updated in the database. Conversely, ignored properties are not
stored to the database. You can mix managed and ignored properties 
within a class. 

The syntax to mark properties as managed or ignored varies depending on which
version of the SDK you use.

Persisted Property Attributes
`````````````````````````````

.. versionadded:: 10.10.0
   The ``@Persisted`` declaration style replaces the ``@objc dynamic``, 
   ``RealmOptional``, and ``RealmProperty`` declaration notations from older 
   versions of the SDK.

Declare model properties that you want to store to the database as 
``@Persisted``. This enables them to access the underlying database data.

When you declare any properties as ``@Persisted`` within a class, the other 
properties within that class are automatically ignored.

If you mix ``@Persisted`` and ``@objc dynamic`` property declarations within
a class definition, any property attributes marked as ``@objc dynamic`` will 
be ignored.

Related Reading
```````````````

- :ref:`Supported Property Types <ios-supported-property-types>`
- :ref:`Objective-C Dynamic Property Attributes <objc-dynamic-property-attributes>`

.. _ios-separated-example-explain-specify-a-primary-key:

Explain: Specify a Primary Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can designate a property as the **primary key** of your class.

Primary keys allow you to efficiently find, update, and upsert objects.

Primary keys are subject to the following limitations:

- You can define only one primary key per object model.

- Primary key values must be unique across all instances of an object
  in a {+realm+}. {+client-database+} throws an error if you try to
  insert a duplicate primary key value.

- Primary key values are immutable. To change the primary key value of
  an object, you must delete the original object and insert a new object
  with a different primary key value.

- Embedded objects cannot define a primary key.

Related Reading
```````````````

- :ref:`Find an Object by Primary Key <ios-find-a-specific-object-by-primary-key>`
- :ref:`Upsert an Object By Primary Key <ios-upsert-an-object>`
- :ref:`Embedded objects <ios-embedded-objects>`

.. _ios-separated-example-explain-index-a-property:

Explain: Index a Property
~~~~~~~~~~~~~~~~~~~~~~~~~

Indexes make queries using equality and IN operators faster in exchange
for slightly slower writes. Indexes take up more space in the realm
file. It's best to only add indexes when optimizing the read performance
for specific situations.

Realm supports indexing for string, integer, boolean, ``Date``, ``UUID``,
``ObjectId``, and ``AnyRealmValue`` properties.

.. versionadded:: 10.8.0
   ``UUID`` and ``AnyRealmValue`` types

.. _ios-separated-example-explain-ignore-a-property:

Explain: Ignore a Property
~~~~~~~~~~~~~~~~~~~~~~~~~~

Ignored properties behave exactly like normal properties. They can't be
used in queries and won't trigger Realm notifications. You can still
observe them using KVO.

.. tip::

   Realm automatically ignores read-only properties.

Related Reading
```````````````

- :apple:`Apple KVO Documentation <library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html>`

Concept: Objective-C Dynamic Property Attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. versionchanged:: 10.10.0
   This property declaration information is for versions of the SDK before 
   10.10.0. 

Declare dynamic {+backend-short+} model properties in the Objective-C runtime. This 
enables them to access the underlying database data. 

You can either:

- Use ``@objc dynamic var`` to declare individual properties
- Use ``@objcMembers`` to declare a class. Then, declare individual 
  properties with ``dynamic var``. 

Use ``let`` to declare ``LinkingObjects``, ``List``, ``RealmOptional`` and 
``RealmProperty``. The Objective-C runtime cannot represent these 
generic properties.

.. versionchanged:: 10.8.0
   ``RealmProperty`` replaces ``RealmOptional``

Related Reading
```````````````

- :ref:`Supported Property Types <ios-supported-property-types>`

.. _ios-separated-example-declare-relationship-properties:

Concept: Relationship Properties
--------------------------------

{+client-database+} allows you to define explicit relationships between 
objects. A relationship is an object property that references another 
{+client-db-short+} object instead of a primitive data type. Define a 
relationship by setting an object property's type to another object in the 
model.

{+client-database+} doesn't use bridge tables or explicit joins to define 
relationships as you would in a relational database. {+client-db-short+}
handles relationships through embedded objects or reference properties to 
other {+client-db-short+} objects. You read from and write to these 
properties directly. This makes querying relationships as performant as 
querying against any other property.

There are three primary types of relationships between objects:

- :ref:`One-to-One Relationship <ios-separated-example-define-a-to-one-relationship-property>`
- :ref:`One-to-Many Relationship <ios-separated-example-define-a-to-many-relationship-property>`
- :ref:`Inverse Relationship <ios-separated-example-define-an-inverse-relationship-property>`

.. _ios-separated-example-explain-define-a-to-one-relationship-property:

Explain: Define a To-One Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A **to-one** relationship means that an object relates to one other object. 
You define a to-one relationship for an object type in its object 
schema. Specify a property where the type is the related {+service-short+} 
object type. For example, you can model a person having at most one 
companion dog as a to-one relationship.

Setting a relationship field to null removes the connection between objects. 
Realm does not delete the referenced object, though, unless it is an embedded 
object.

.. note:: To-one relationships must be optional

   When you declare a to-one relationship in your object model, it must
   be an optional property. If you try to make a to-one relationship
   required, Realm throws an exception at runtime.

Related Reading
```````````````

- :ref:`Object Models & Schemas <ios-object-models-and-schemas>`
- :ref:`Embedded Objects <ios-embedded-objects>`

.. _ios-separated-example-explain-define-a-to-many-relationship-property:

Explain: Define a To-Many Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A **to-many** relationship maps one property to zero or more instances
of another object type. In {+client-database+}, a to-many relationship is 
a list of references to other objects. For example, you can model a person 
having any number of companion dogs as a to-many relationship.

.. _ios-separated-example-explain-define-an-inverse-relationship-property:

Explain: Define an Inverse Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Relationship definitions in {+client-database+} are unidirectional. An 
**inverse relationship** links an object back to an object that refers 
to it. You must explicitly define a property in the object's model as an 
inverse relationship. Inverse relationships can link back to objects in 
a to-one or to-many relationship.

For example, consider a task tracker with the to-many relationship "User has 
many Tasks". This does not automatically create the inverse relationship 
"Task belongs to User". To create the inverse relationship, add a User 
property on the Task that points back to the task's owner. When you specify 
the inverse relationship from task to user, you can query on that. If you 
don't specify the inverse relationship, you must run a separate query to 
look up the user to whom the task is assigned.

Relationships can be many-to-one or many-to-many. So following inverse 
relationships can result in zero, one, or many objects.

{+client-database+} automatically updates implicit relationships whenever 
an object is added or removed in a corresponding to-many list or to-one 
relationship property. You cannot manually set the value of an inverse 
relationship property.

.. _ios-separated-example-explain-define-an-embedded-object-property:

Explain: Define an Embedded Object Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An **embedded object** exists as nested data inside of a single,
specific parent object. It inherits the lifecycle of its parent object
and cannot exist as an independent Realm object. Realm automatically
deletes embedded objects if their parent object is deleted or when
overwritten by a new embedded object instance.

.. note:: Realm Uses Cascading Deletes for Embedded Objects
   
   When you delete a Realm object, any embedded objects referenced by
   that object are deleted with it. If you want the referenced objects
   to persist after the deletion of the parent object, your type should
   not be an embedded object at all. Use a regular Realm object with a 
   to-one relationship instead.

Related Reading
```````````````

- :ref:`Define a Realm Object <ios-define-a-new-object-type>`
- :ref:`Define a to-one relationship <ios-define-a-to-one-relationship-property>`

Concept: Build View Models with Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 10.21.0

You can work with a subset of your {+client-database+} object's properties 
by creating a class projection. A class projection is a class that can pass 
through or transform some or all of your {+realm+} object's properties. 
You can query a class projection, or observe it for changes. 

Class projection enables you to create model abstractions for use in your 
view models. Class projection also simplifies testing with  {+client-database+}.

Related Reading
```````````````

- :ref:`Define and Use Class Projections <ios-define-and-use-class-projections>`
- :ref:`Simplify testing with {+client-database+} <ios-simplify-testing-with-class-projections>`

.. _ios-structs:

Concept: Swift Structs
~~~~~~~~~~~~~~~~~~~~~~

{+client-database+} does not support Swift structs as models for a variety of 
reasons. {+service-short+}'s design focuses on “live” objects. 
This concept is not compatible with value type structs. By design, 
{+service-short+} provides features that are incompatible with these 
semantics, such as:
 
- Live data
- Reactive APIs <ios-react-to-changes>
- Low memory footprint of data
- Good operation performance
- Lazy and cheap access to partial data <ios-live-queries>
- Lack of data serialization/deserialization
- Keeping potentially complex object graphs synchronized <ios-sync-changes-between-devices>

That said, it is sometimes useful to detach objects from their backing 
{+realm+}. This typically isn't an ideal design decision. Instead, 
developers use this as a workaround for temporary limitations in our 
library.

You can use key-value coding to initialize an unmanaged object as a copy of 
a managed object. Then, you can work with that unmanaged object
like any other NSObject.

.. code-block:: swift

   let standaloneModelObject = MyModel(value: persistedModelObject)

Related Reading
```````````````

- :ref:`Live data <ios-live-object>`
- :ref:`React to Changes <ios-react-to-changes>`
- :ref:`Live Queries <ios-live-queries>`
- :ref:`Sync Changes Between Devices <ios-sync-changes-between-devices>`
- :apple:`Apple's NSObject Documentation <documentation/objectivec/nsobject>`

.. _ios-inheritance:

Concept: Model Inheritance
~~~~~~~~~~~~~~~~~~~~~~~~~~

You can subclass {+client-database+} models to share behavior between
classes, but there are limitations. In particular, {+service-short+}
does not allow you to:

- Cast between polymorphic classes: subclass to subclass, subclass to parent, parent to subclass
- Query on multiple classes simultaneously: for example, "get all instances of parent class and subclass"
- Multi-class containers: ``List`` and ``Results`` with a mixture of parent and subclass

.. versionadded:: 10.10.0
   While you can't mix ``@Persisted`` and ``@objc dynamic`` property declarations
   within a class, you can mix the notation styles across base and subclasses. 
   For example, a base class could have a ``@Persisted var foo: Int`` property, 
   and a subclass could have an ``@objc dynamic var bar = 0`` property, with 
   both persisted. However, the ``@objc dynamic`` property would be ignored if
   the ``@Persisted`` property were within the same base or subclass.

Related Reading
```````````````

- :github:`GitHub Code Samples <realm/realm-swift/issues/1109#issuecomment-143834756>`
